import java.util.Set;
import java.util.HashSet;

aspect NameAnalysis {
	public class SymbolTable {
		private static final SymbolTable BOTTOM = new SymbolTable() {
			@Override
			public boolean declare(String name) {
				throw new UnsupportedOperationException(
						"can not add name to bottom of name stack");
			}
			@Override
			public boolean lookup(String name) {
				return false;
			}
		};

		private final SymbolTable tail;
		private final Set<String> names = new HashSet<String>();

		public SymbolTable() {
			tail = BOTTOM;
		}

		public SymbolTable(SymbolTable tail) {
			this.tail = tail;
		}

		/**
		 * Attempt to add a new name to the symbol table.
		 * @return true if name was not already declared
		 */
		public boolean declare(String name) {
			return names.add(name);
		}

		/**
		 * @return true if name has been declared
		 */
		public boolean lookup(String name) {
			return names.contains(name) || tail.lookup(name);
		}

		/**
		 * Push a new table on the stack.
		 * @return the new top of the stack
		 */
		public SymbolTable push() {
			return new SymbolTable(this);
		}
	}

	/**
	 * @param err where to write error messages
	 */
	public void Program.checkNames(PrintStream err) {
		SymbolTable symbols = new SymbolTable();
        checkNames(err, symbols);
	}

	/**
	 * @param err where to write error messages
	 * @param symbols symbol table
	 */
	public void ASTNode.checkNames(PrintStream err, SymbolTable symbols) {
    	for (ASTNode child : astChildren()) {
		  child.checkNames(err, symbols);
		}
	}

    public void Func.checkNames(PrintStream err, SymbolTable program_symbols) {
        SymbolTable func_symbols = program_symbols.push();
        getDecl().checkNames(err, program_symbols);
        getArgs().checkNames(err, func_symbols);
        getBlock().checkNames(err, func_symbols);
    }

    public void FuncArgs.checkNames(PrintStream err, SymbolTable symbols) {
        getIdDecls().checkNamesLoop(err, symbols);
    }

    public void Block.checkNames(PrintStream err, SymbolTable symbols) {
        SymbolTable block_symbols = symbols.push();
        getStmts().checkNamesLoop(err, block_symbols);
    }

    public void FuncCall.checkNames(PrintStream err, SymbolTable symbols) {
        getID().checkNames(err, symbols);
        getArgs().checkNames(err, symbols);
    }

    public void FuncCallArgs.checkNames(PrintStream err, SymbolTable symbols) {
        getIdUses().checkNamesLoop(err, symbols);
    }

    public void AssigmtStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getLeft().checkNames(err, symbols);
        if(hasRight()) {
            getRight().checkNames(err, symbols);
        }
    }

    public void ReturnStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getReturn().checkNames(err, symbols);
    }

    public void Condition.checkNames(PrintStream err, SymbolTable symbols) {
        getCondition().checkNames(err, symbols);
    }

    public void WhileStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getCondition().checkNames(err, symbols);
        getThen().checkNames(err, symbols);
    }

    public void IfStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getCondition().checkNames(err, symbols);
        getThen().checkNames(err, symbols);
        getElif().checkNames(err, symbols);
        if(hasElse()) {
            getElse().checkNames(err, symbols);
        }
    }

    public void ElseIfStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getCondition().checkNames(err, symbols);
        getThen().checkNames(err, symbols);
    }

    public void ElseIfStmts.checkNames(PrintStream err, SymbolTable symbols) {
        getElseIfStmts().checkNamesLoop(err, symbols);
    }

    public void ElseStmt.checkNames(PrintStream err, SymbolTable symbols) {
        getBlock().checkNames(err, symbols);
    }

    public void BinaryExpr.checkNames(PrintStream err, SymbolTable symbols) {
        getLeft().checkNames(err, symbols);
        getRight().checkNames(err, symbols);
    }

	public void Numeral.checkNames(PrintStream err, SymbolTable symbols) {

	}

	public void IdDecl.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.declare(getID())) {
		    String msg = String.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.format(msg);
			err.println();
			System.exit(-1);
		}
	}

	public void IdUse.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
			System.exit(-1);
		}
	}

	/**
	 * Helper method
	 * @return line number of this token
	 */
	public int ASTNode.getLine() {
		return getLine(getStart());
	}

	public void List.checkNamesLoop(PrintStream err, SymbolTable symbols) {
        for (Iterator<T> it = iterator(); it.hasNext(); ) {
            T element = it.next();
            element.checkNames(err, symbols);
        }
	}
}
