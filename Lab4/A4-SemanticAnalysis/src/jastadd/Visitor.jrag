aspect Visitor {
	/**
	 * Visitor interface for SimpliC language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(Condition node, Object data);

		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);

		public Object visit(Func node, Object data);
		public Object visit(FuncArgs node, Object data);
		public Object visit(FuncCall node, Object data);
		public Object visit(FuncCallArgs node, Object data);

			/* ------- statements ------- */

		public Object visit(AssigmtStmt node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(IfStmt node, Object data);
		public Object visit(ElseIfStmt node, Object data);
		public Object visit(ElseIfStmts node, Object data);
		public Object visit(ElseStmt node, Object data);

			/* ----- binary expressions ----- */	

		public Object visit(Numeral node, Object data);

		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);

		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);

		public Object visit(GT node, Object data);
		public Object visit(LT node, Object data);
		public Object visit(GE node, Object data);
		public Object visit(LE node, Object data);
		public Object visit(EQ node, Object data);
		public Object visit(NE node, Object data);

	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Condition.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

/* --- */

	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

/* --- */

	public Object Func.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncArgs.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncCallArgs.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

/* --- */

	public Object AssigmtStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ReturnStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object WhileStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ElseIfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ElseIfStmts.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ElseStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

/* --- */

	public Object Numeral.accept(Visitor visitor, Object data) {	
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GT.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LT.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GE.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LE.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object EQ.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NE.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}