%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, INT, NUMERAL;
%terminals LEFTBRACKET, RIGHTBRACKET, LEFTPARENTHESIS, RIGHTPARENTHESIS, COMMA, SEMICOLON;
%terminals ASSIGN, EQ, NE, GE, GT, LE, LT, MUL, DIV, MOD, ADD, SUB;
%typeof program         = "Program";
%typeof exp_list        = "List";
%typeof stmt_list       = "List";
%typeof arg_assgmt_list = "List";
%typeof exp             = "Expr";
%typeof stmt            = "Stmt";
%typeof func_decl       = "Expr";
%typeof arg             = "Arg";
%typeof arg_assgmt      = "Stmt";
%typeof assgmt          = "Stmt";
%typeof block           = "Block";
%typeof idUse           = "IdUse";
%typeof numeral         = "Numeral";
%typeof literal         = "Literal";


%goal program;
program = exp_list.a {:  return new Program(a); :} ;

exp_list =
    exp.a {: return new List().add(a); :}
    | exp_list.a exp.b  {: return a.add(b); :}
    ;

exp =
    func_decl
    ;

func_decl =
    INT ID.id arg.a block.b {: return new FuncDecl(new IdDecl(id), a, b); :}
    ;

arg =
    LEFTPARENTHESIS arg_assgmt_list.a RIGHTPARENTHESIS {: return new Arg(new Opt(a)); :}
    | LEFTPARENTHESIS RIGHTPARENTHESIS {: return new Arg(new Opt()); :}
    ;

block =
    LEFTBRACKET stmt_list.a RIGHTBRACKET {: return new Block(new Opt(a)); :}
    | LEFTBRACKET RIGHTBRACKET {: return new Block(new Opt()); :}
    ;

stmt_list =
    stmt.a {: return new List().add(a); :}
    | stmt_list.a stmt.b {: return a.add(b); :}
    ;

stmt =
    assgmt
    ;

literal =
    NUMERAL.n {: return new Numeral(n); :}
    | ID.id {: return new IdUse(id); :}
    ;

arg_assgmt_list =
    arg_assgmt.a {: return new List().add(a); :}
    | arg_assgmt_list.a COMMA arg_assgmt.b {: return a.add(b); :}
    ;

arg_assgmt =
    INT ID.id {: return new AssgmtStmt(new IdUse(id), new Opt()); :}
    ;

assgmt =
    INT ID.left ASSIGN literal.right SEMICOLON {: return new AssgmtStmt(new IdUse(left), new Opt(right)); :}
    | ID.left ASSIGN literal.right SEMICOLON {: return new AssgmtStmt(new IdUse(left), new Opt(right)); :}
    | INT ID.left SEMICOLON {: return new AssgmtStmt(new IdUse(left), new Opt()); :}
    ;



