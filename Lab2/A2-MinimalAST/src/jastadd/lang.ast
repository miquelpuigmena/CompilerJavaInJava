Program ::= Stmt*;

abstract Stmt;
abstract Expr       : Stmt;
abstract Factor     : Expr;

Block                               ::= Stmt*;

Func                : Stmt          ::= decl:IdDecl args:FuncArgs block:Block;
FuncArgs                            ::= IdDecl*;
FuncCall            : Expr          ::= name:IdDecl args:FuncCallArgs;
FuncCallArgs                        ::= Expr*;

AssigmtStmt         : Stmt          ::= left:IdDecl [right:Expr];
ReturnStmt          : Stmt          ::= Expr;
Condition           : Expr          ::= Expr;
WhileStmt           : Stmt          ::= condition:Expr block:Block;
IfStmt              : Stmt          ::= condition:Expr block:Block elif:ElseIfStmts [else:ElseStmt];
ElseIfStmt          : Stmt          ::= condition:Expr block:Block;
ElseIfStmts                         ::= ElseIfStmt*;
ElseStmt            : Stmt          ::= block:Block;

IdUse               : Factor        ::= <ID:String>;
Numeral             : Factor        ::= <NUMERAL:String>;
IdDecl              : Expr          ::= <ID:String>;

abstract BinaryExpr : Expr          ::= left:Expr right:Expr;
Add : BinaryExpr;
Sub : BinaryExpr;
Mul : BinaryExpr;
Div : BinaryExpr;
Mod : BinaryExpr;
GT  : BinaryExpr;
LT  : BinaryExpr;
GE  : BinaryExpr;
LE  : BinaryExpr;
EQ  : BinaryExpr;
NE  : BinaryExpr;
