package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short INT = 1;
    public static final short LEFTBRACKET = 2;
    public static final short RIGHTBRACKET = 3;
    public static final short LEFTPARENTHESIS = 4;
    public static final short ID = 5;
    public static final short RIGHTPARENTHESIS = 6;

    public static final String[] NAMES = {
        "EOF",
        "INT",
        "LEFTBRACKET",
        "RIGHTBRACKET",
        "LEFTPARENTHESIS",
        "ID",
        "RIGHTPARENTHESIS",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program =  exp
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    Action.RETURN, // [1] exp =  function (default action: return symbol 1)
    new Action() { // [2] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    RETURN2, // [3] exp =  function exp (default action: return symbol 2)
    new Action() { // [4] arg =  LEFTPARENTHESIS RIGHTPARENTHESIS
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LEFTPARENTHESIS = _symbols[offset + 1];
        final Symbol RIGHTPARENTHESIS = _symbols[offset + 2];
        return new Arg();
      }
    },
    new Action() { // [5] function =  INT ID arg block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Arg a = (Arg) _symbols[offset + 3].value;
        final Block b = (Block) _symbols[offset + 4].value;
        return new Function(new IdDecl(id),a, b);
      }
    },
    new Action() { // [6] block =  LEFTBRACKET RIGHTBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LEFTBRACKET = _symbols[offset + 1];
        final Symbol RIGHTBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
  };

      static final Action RETURN2 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 2];
        }
      };
  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9o5aJiFmZ0CXA$kapvWOaDYPuETZOcP3V5Roi#cXTPSIX5nXtBIP#lg94uT03S8GiI8z86" +
    "CEK4Efye5LVXAVQCzT$wqCBNEk9SvfJ2kD2kVfhOqjLPRppNQ8E2DCdREXnoZK0hb4A6UfW" +
    "w1vwAvbSObnicC2sVwqP7L7P$JcMJyrpNPa2tPaJqva2CvaJEvaEkujwqPlb0zwIRVj9xWU" +
    "kEVKaxLJJVWR8LP#6h26KTyBq7r1XaIrmy=");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
