package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short INT = 1;
    public static final short LEFTBRACKET = 2;
    public static final short RIGHTBRACKET = 3;
    public static final short LEFTPARENTHESIS = 4;
    public static final short ID = 5;
    public static final short RIGHTPARENTHESIS = 6;

    public static final String[] NAMES = {
        "EOF",
        "INT",
        "LEFTBRACKET",
        "RIGHTBRACKET",
        "LEFTPARENTHESIS",
        "ID",
        "RIGHTPARENTHESIS",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program =  func_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [1] func_list =  func_decl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FuncDecl a = (FuncDecl) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [2] func_list =  func_list func_decl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final FuncDecl b = (FuncDecl) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [3] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [4] arg =  LEFTPARENTHESIS RIGHTPARENTHESIS
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LEFTPARENTHESIS = _symbols[offset + 1];
        final Symbol RIGHTPARENTHESIS = _symbols[offset + 2];
        return new Arg();
      }
    },
    new Action() { // [5] func_decl =  INT ID arg block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Arg a = (Arg) _symbols[offset + 3].value;
        final Block b = (Block) _symbols[offset + 4].value;
        return new FuncDecl(new IdDecl(id), a, b);
      }
    },
    new Action() { // [6] block =  LEFTBRACKET RIGHTBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LEFTBRACKET = _symbols[offset + 1];
        final Symbol RIGHTBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9o5aJiJWZ0GX9Vm544gEsVixRItixAsS$mj#BFbUMuWQgx1c$d8BSjTaWF00mOn8daXHOW" +
    "S2MoKqnCYT7#HUJbabD6JA#KDCdYgzpsibIfKNQUyZV9QQJtLI8E0PywuSygUEM9Xe90f#4" +
    "aWtx0tyPNoeWLFroLAcGKLBlNakO7gYRax5#FkkYKxiYS7SYGdSYONSYKtSdUrRJst7Epgy" +
    "lwJEptwkfxtg$0lx5m3JjLYE673#Hg#ZVY$3CetWKFP00==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
