%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, INT, NUMERAL;
%terminals LEFTBRACKET, RIGHTBRACKET, LEFTPARENTHESIS, RIGHTPARENTHESIS, COMMA, SEMICOLON;
%terminals ASSIGN, EQ, NE, GE, GT, LE, LT, MUL, DIV, MOD, ADD, SUB;


%typeof program         = "Program";
%typeof func_list       = "List";
%typeof stmt_list       = "List";
%typeof arg_assgmt_list = "List";
%typeof func_call_param_list    = "List";
%typeof stmt            = "Stmt";
%typeof func_decl       = "Func";
%typeof arg             = "Arg";
%typeof arg_assgmt      = "Stmt";
%typeof assgmt          = "Stmt";
%typeof block           = "Block";
%typeof idUse           = "IdUse";
%typeof numeral         = "Numeral";
%typeof exp             = "Expr";
%typeof factor          = "Expr";
%typeof func_call       = "FuncCall";
%typeof sum             = "Expr";
%typeof term            = "Expr";


%goal program;
/* PROGRAM definition */
program = func_list.a {:  return new Program(a); :} ;

/* PROGRAM
    - Composed by list of functions */
func_list =
    func_decl.a {: return new List().add(a); :}
    | func_list.a func_decl.b  {: return a.add(b); :}
    ;

/* PROGRAM
    LIST OF FUNCTIONS
        - Function declaration as INT ID arg block */
func_decl =
    INT ID.id arg.a block.b {: return new FuncDecl(new IdDecl(id), a, b); :}
    ;

/* PROGRAM
    LIST OF FUNCTIONS
        -To call a Function */
func_call =
    ID.id LEFTPARENTHESIS func_call_param_list.b RIGHTPARENTHESIS {: return new FuncCall(new IdUse(id), new Opt(b)); :}
    | ID.id LEFTPARENTHESIS RIGHTPARENTHESIS {: return new FuncCall(new IdUse(id), new Opt()); :}
    ;

/* PROGRAM
    LIST OF FUNCTIONS
        FUNCTION CALLED
            - Parameters inside func_call */
func_call_param_list =
	exp.a {: return new List().add(a); :}
	| func_call_param_list.a COMMA exp.b {: return a.add(b); :}
	;

arg =
    LEFTPARENTHESIS arg_assgmt_list.a RIGHTPARENTHESIS {: return new Arg(new Opt(a)); :}
    | LEFTPARENTHESIS RIGHTPARENTHESIS {: return new Arg(new Opt()); :}
    ;

arg_assgmt_list =
    arg_assgmt.a {: return new List().add(a); :}
    | arg_assgmt_list.a COMMA arg_assgmt.b {: return a.add(b); :}
    ;

arg_assgmt =
    INT ID.id {: return new AssignStmt(new IdUse(id), new Opt()); :}
    ;

block =
    LEFTBRACKET stmt_list.a RIGHTBRACKET {: return new Block(new Opt(a)); :}
    | LEFTBRACKET RIGHTBRACKET {: return new Block(new Opt()); :}
    ;

stmt_list =
    stmt.a {: return new List().add(a); :}
    | stmt_list.a stmt.b {: return a.add(b); :}
    ;

stmt =
    assgmt
    ;

assgmt =
    INT ID.left ASSIGN exp.right SEMICOLON {: return new AssignStmt(new IdUse(left), new Opt(right)); :}
    | ID.left ASSIGN exp.right SEMICOLON {: return new AssignStmt(new IdUse(left), new Opt(right)); :}
    | INT ID.left SEMICOLON {: return new AssignStmt(new IdUse(left), new Opt()); :}
    | func_call SEMICOLON
    ;

exp =
	sum
	| sum.a GT sum.b 			{: return new GT(a, b); :}
	| sum.a LT sum.b 			{: return new LT(a, b); :}
	| sum.a GE sum.b 			{: return new GE(a, b); :}
	| sum.a LE sum.b 			{: return new LE(a, b); :}
	| sum.a EQ sum.b 			{: return new EQ(a, b); :}
	| sum.a NE sum.b 			{: return new NE(a, b); :}
	;

sum =
	sum.a ADD term.b 			{: return new Add(a, b); :}
	| sum.a SUB term.b 			{: return new Sub(a, b); :}
	| term
	;

term =
    term.a MUL factor.b 		{: return new Mul(a, b); :}
	| term.a DIV factor.b 		{: return new Div(a, b); :}
	| term.a MOD factor.b 		{: return new Mod(a, b); :}
	| factor
	;

factor =
    NUMERAL.n {: return new Numeral(n); :}
    | ID.id {: return new IdUse(id); :}
    | func_call
    | LEFTPARENTHESIS exp.a RIGHTPARENTHESIS
    ;


